/* soapServer.c
   Generated by gSOAP 2.7.10 from imRoot.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#include "soapH.h"
#ifdef __cplusplus
extern "C" {
#endif

SOAP_SOURCE_STAMP("@(#) soapServer.c ver 2.7.10 2013-04-08 09:10:09 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
#ifndef WITH_FASTCGI
	unsigned int k = soap->max_keep_alive;
#endif

	do
	{
#ifdef WITH_FASTCGI
		if (FCGI_Accept() < 0)
		{
			soap->error = SOAP_EOF;
			return soap_send_fault(soap);
		}
#endif

		soap_begin(soap);

#ifndef WITH_FASTCGI
		if (soap->max_keep_alive > 0 && !--k)
			soap->keep_alive = 0;
#endif

		if (soap_begin_recv(soap))
		{	if (soap->error < SOAP_STOP)
			{
#ifdef WITH_FASTCGI
				soap_send_fault(soap);
#else 
				return soap_send_fault(soap);
#endif
			}
			soap_closesock(soap);

			continue;
		}

		if (soap_envelope_begin_in(soap)
		 || soap_recv_header(soap)
		 || soap_body_begin_in(soap)
		 || soap_serve_request(soap)
		 || (soap->fserveloop && soap->fserveloop(soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(soap);
#else
			return soap_send_fault(soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(soap);
		soap_end(soap);
	} while (1);
#else
	} while (soap->keep_alive);
#endif
	return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:OperationSms"))
		return soap_serve___ns1__OperationSms(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:OperationCenter"))
		return soap_serve___ns1__OperationCenter(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:sayHello"))
		return soap_serve___ns1__sayHello(soap);
	if (!soap_match_tag(soap, soap->tag, "ns3:takePhoto"))
		return soap_serve_ns3__takePhoto(soap);
	if (!soap_match_tag(soap, soap->tag, "ns3:queryVersion"))
		return soap_serve_ns3__queryVersion(soap);
	if (!soap_match_tag(soap, soap->tag, "ns3:sendMessage"))
		return soap_serve_ns3__sendMessage(soap);
	if (!soap_match_tag(soap, soap->tag, "ns3:setGPSFrequency"))
		return soap_serve_ns3__setGPSFrequency(soap);
	if (!soap_match_tag(soap, soap->tag, "ns3:setMileage"))
		return soap_serve_ns3__setMileage(soap);
	if (!soap_match_tag(soap, soap->tag, "ns3:updateSysConf"))
		return soap_serve_ns3__updateSysConf(soap);
	if (!soap_match_tag(soap, soap->tag, "ns3:updateServerInfo"))
		return soap_serve_ns3__updateServerInfo(soap);
	return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__OperationSms(struct soap *soap)
{	struct __ns1__OperationSms soap_tmp___ns1__OperationSms;
	struct _ns1__OperationSmsResponse ns1__OperationSmsResponse;
	soap_default__ns1__OperationSmsResponse(soap, &ns1__OperationSmsResponse);
	soap_default___ns1__OperationSms(soap, &soap_tmp___ns1__OperationSms);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__OperationSms(soap, &soap_tmp___ns1__OperationSms, "-ns1:OperationSms", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = __ns1__OperationSms(soap, soap_tmp___ns1__OperationSms.ns1__OperationSms, &ns1__OperationSmsResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize__ns1__OperationSmsResponse(soap, &ns1__OperationSmsResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put__ns1__OperationSmsResponse(soap, &ns1__OperationSmsResponse, "ns1:OperationSmsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put__ns1__OperationSmsResponse(soap, &ns1__OperationSmsResponse, "ns1:OperationSmsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__OperationCenter(struct soap *soap)
{	struct __ns1__OperationCenter soap_tmp___ns1__OperationCenter;
	struct _ns1__OperationCenterResponse ns1__OperationCenterResponse;
	soap_default__ns1__OperationCenterResponse(soap, &ns1__OperationCenterResponse);
	soap_default___ns1__OperationCenter(soap, &soap_tmp___ns1__OperationCenter);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__OperationCenter(soap, &soap_tmp___ns1__OperationCenter, "-ns1:OperationCenter", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = __ns1__OperationCenter(soap, soap_tmp___ns1__OperationCenter.ns1__OperationCenter, &ns1__OperationCenterResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize__ns1__OperationCenterResponse(soap, &ns1__OperationCenterResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put__ns1__OperationCenterResponse(soap, &ns1__OperationCenterResponse, "ns1:OperationCenterResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put__ns1__OperationCenterResponse(soap, &ns1__OperationCenterResponse, "ns1:OperationCenterResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__sayHello(struct soap *soap)
{	struct __ns1__sayHello soap_tmp___ns1__sayHello;
	struct _ns1__sayHelloResponse ns1__sayHelloResponse;
	soap_default__ns1__sayHelloResponse(soap, &ns1__sayHelloResponse);
	soap_default___ns1__sayHello(soap, &soap_tmp___ns1__sayHello);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__sayHello(soap, &soap_tmp___ns1__sayHello, "-ns1:sayHello", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = __ns1__sayHello(soap, soap_tmp___ns1__sayHello.ns1__sayHello, &ns1__sayHelloResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize__ns1__sayHelloResponse(soap, &ns1__sayHelloResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put__ns1__sayHelloResponse(soap, &ns1__sayHelloResponse, "ns1:sayHelloResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put__ns1__sayHelloResponse(soap, &ns1__sayHelloResponse, "ns1:sayHelloResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns3__takePhoto(struct soap *soap)
{	struct ns3__takePhoto soap_tmp_ns3__takePhoto;
	struct ns3__takePhotoResponse _param_1;
	soap_default_ns3__takePhotoResponse(soap, &_param_1);
	soap_default_ns3__takePhoto(soap, &soap_tmp_ns3__takePhoto);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns3__takePhoto(soap, &soap_tmp_ns3__takePhoto, "ns3:takePhoto", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns3__takePhoto(soap, soap_tmp_ns3__takePhoto._in0, &_param_1);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns3__takePhotoResponse(soap, &_param_1);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns3__takePhotoResponse(soap, &_param_1, "ns3:takePhotoResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns3__takePhotoResponse(soap, &_param_1, "ns3:takePhotoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns3__queryVersion(struct soap *soap)
{	struct ns3__queryVersion soap_tmp_ns3__queryVersion;
	struct ns3__queryVersionResponse _param_2;
	soap_default_ns3__queryVersionResponse(soap, &_param_2);
	soap_default_ns3__queryVersion(soap, &soap_tmp_ns3__queryVersion);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns3__queryVersion(soap, &soap_tmp_ns3__queryVersion, "ns3:queryVersion", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns3__queryVersion(soap, soap_tmp_ns3__queryVersion._in0, &_param_2);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns3__queryVersionResponse(soap, &_param_2);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns3__queryVersionResponse(soap, &_param_2, "ns3:queryVersionResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns3__queryVersionResponse(soap, &_param_2, "ns3:queryVersionResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns3__sendMessage(struct soap *soap)
{	struct ns3__sendMessage soap_tmp_ns3__sendMessage;
	struct ns3__sendMessageResponse _param_3;
	soap_default_ns3__sendMessageResponse(soap, &_param_3);
	soap_default_ns3__sendMessage(soap, &soap_tmp_ns3__sendMessage);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns3__sendMessage(soap, &soap_tmp_ns3__sendMessage, "ns3:sendMessage", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns3__sendMessage(soap, soap_tmp_ns3__sendMessage._in0, &_param_3);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns3__sendMessageResponse(soap, &_param_3);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns3__sendMessageResponse(soap, &_param_3, "ns3:sendMessageResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns3__sendMessageResponse(soap, &_param_3, "ns3:sendMessageResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns3__setGPSFrequency(struct soap *soap)
{	struct ns3__setGPSFrequency soap_tmp_ns3__setGPSFrequency;
	struct ns3__setGPSFrequencyResponse _param_4;
	soap_default_ns3__setGPSFrequencyResponse(soap, &_param_4);
	soap_default_ns3__setGPSFrequency(soap, &soap_tmp_ns3__setGPSFrequency);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns3__setGPSFrequency(soap, &soap_tmp_ns3__setGPSFrequency, "ns3:setGPSFrequency", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns3__setGPSFrequency(soap, soap_tmp_ns3__setGPSFrequency._in0, &_param_4);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns3__setGPSFrequencyResponse(soap, &_param_4);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns3__setGPSFrequencyResponse(soap, &_param_4, "ns3:setGPSFrequencyResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns3__setGPSFrequencyResponse(soap, &_param_4, "ns3:setGPSFrequencyResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns3__setMileage(struct soap *soap)
{	struct ns3__setMileage soap_tmp_ns3__setMileage;
	struct ns3__setMileageResponse _param_5;
	soap_default_ns3__setMileageResponse(soap, &_param_5);
	soap_default_ns3__setMileage(soap, &soap_tmp_ns3__setMileage);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns3__setMileage(soap, &soap_tmp_ns3__setMileage, "ns3:setMileage", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns3__setMileage(soap, soap_tmp_ns3__setMileage._in0, &_param_5);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns3__setMileageResponse(soap, &_param_5);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns3__setMileageResponse(soap, &_param_5, "ns3:setMileageResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns3__setMileageResponse(soap, &_param_5, "ns3:setMileageResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns3__updateSysConf(struct soap *soap)
{	struct ns3__updateSysConf soap_tmp_ns3__updateSysConf;
	struct ns3__updateSysConfResponse _param_6;
	soap_default_ns3__updateSysConfResponse(soap, &_param_6);
	soap_default_ns3__updateSysConf(soap, &soap_tmp_ns3__updateSysConf);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns3__updateSysConf(soap, &soap_tmp_ns3__updateSysConf, "ns3:updateSysConf", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns3__updateSysConf(soap, soap_tmp_ns3__updateSysConf._in0, &_param_6);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns3__updateSysConfResponse(soap, &_param_6);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns3__updateSysConfResponse(soap, &_param_6, "ns3:updateSysConfResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns3__updateSysConfResponse(soap, &_param_6, "ns3:updateSysConfResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns3__updateServerInfo(struct soap *soap)
{	struct ns3__updateServerInfo soap_tmp_ns3__updateServerInfo;
	struct ns3__updateServerInfoResponse _param_7;
	soap_default_ns3__updateServerInfoResponse(soap, &_param_7);
	soap_default_ns3__updateServerInfo(soap, &soap_tmp_ns3__updateServerInfo);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns3__updateServerInfo(soap, &soap_tmp_ns3__updateServerInfo, "ns3:updateServerInfo", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns3__updateServerInfo(soap, soap_tmp_ns3__updateServerInfo._in0, &_param_7);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns3__updateServerInfoResponse(soap, &_param_7);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns3__updateServerInfoResponse(soap, &_param_7, "ns3:updateServerInfoResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns3__updateServerInfoResponse(soap, &_param_7, "ns3:updateServerInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

#ifdef __cplusplus
}
#endif

/* End of soapServer.c */
