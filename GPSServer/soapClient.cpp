/* soapClient.c
   Generated by gSOAP 2.7.10 from imRoot.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#include "soapH.h"
#ifdef __cplusplus
extern "C" {
#endif

SOAP_SOURCE_STAMP("@(#) soapClient.c ver 2.7.10 2013-04-08 09:10:09 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__OperationSms(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct _ns1__OperationSms *ns1__OperationSms, struct _ns1__OperationSmsResponse *ns1__OperationSmsResponse)
{	struct __ns1__OperationSms soap_tmp___ns1__OperationSms;
	if (!soap_endpoint)
		soap_endpoint = "http://120.36.0.57/services/imRoot";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__OperationSms.ns1__OperationSms = ns1__OperationSms;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__OperationSms(soap, &soap_tmp___ns1__OperationSms);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__OperationSms(soap, &soap_tmp___ns1__OperationSms, "-ns1:OperationSms", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__OperationSms(soap, &soap_tmp___ns1__OperationSms, "-ns1:OperationSms", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default__ns1__OperationSmsResponse(soap, ns1__OperationSmsResponse);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get__ns1__OperationSmsResponse(soap, ns1__OperationSmsResponse, "ns1:OperationSmsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__OperationCenter(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct _ns1__OperationCenter *ns1__OperationCenter, struct _ns1__OperationCenterResponse *ns1__OperationCenterResponse)
{	struct __ns1__OperationCenter soap_tmp___ns1__OperationCenter;
	if (!soap_endpoint)
		soap_endpoint = "http://120.36.0.57/services/imRoot";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__OperationCenter.ns1__OperationCenter = ns1__OperationCenter;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__OperationCenter(soap, &soap_tmp___ns1__OperationCenter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__OperationCenter(soap, &soap_tmp___ns1__OperationCenter, "-ns1:OperationCenter", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__OperationCenter(soap, &soap_tmp___ns1__OperationCenter, "-ns1:OperationCenter", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default__ns1__OperationCenterResponse(soap, ns1__OperationCenterResponse);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get__ns1__OperationCenterResponse(soap, ns1__OperationCenterResponse, "ns1:OperationCenterResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__sayHello(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct _ns1__sayHello *ns1__sayHello, struct _ns1__sayHelloResponse *ns1__sayHelloResponse)
{	struct __ns1__sayHello soap_tmp___ns1__sayHello;
	if (!soap_endpoint)
		soap_endpoint = "http://120.36.0.57/services/imRoot";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__sayHello.ns1__sayHello = ns1__sayHello;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__sayHello(soap, &soap_tmp___ns1__sayHello);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__sayHello(soap, &soap_tmp___ns1__sayHello, "-ns1:sayHello", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__sayHello(soap, &soap_tmp___ns1__sayHello, "-ns1:sayHello", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default__ns1__sayHelloResponse(soap, ns1__sayHelloResponse);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get__ns1__sayHelloResponse(soap, ns1__sayHelloResponse, "ns1:sayHelloResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns3__takePhoto(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns2__TakePhotoReq *_in0, struct ns3__takePhotoResponse *_param_1)
{	struct ns3__takePhoto soap_tmp_ns3__takePhoto;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/soap/services/GPSService";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns3__takePhoto._in0 = _in0;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns3__takePhoto(soap, &soap_tmp_ns3__takePhoto);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns3__takePhoto(soap, &soap_tmp_ns3__takePhoto, "ns3:takePhoto", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns3__takePhoto(soap, &soap_tmp_ns3__takePhoto, "ns3:takePhoto", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns3__takePhotoResponse(soap, _param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns3__takePhotoResponse(soap, _param_1, "ns3:takePhotoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns3__queryVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns2__QueryVerReq *_in0, struct ns3__queryVersionResponse *_param_2)
{	struct ns3__queryVersion soap_tmp_ns3__queryVersion;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/soap/services/GPSService";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns3__queryVersion._in0 = _in0;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns3__queryVersion(soap, &soap_tmp_ns3__queryVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns3__queryVersion(soap, &soap_tmp_ns3__queryVersion, "ns3:queryVersion", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns3__queryVersion(soap, &soap_tmp_ns3__queryVersion, "ns3:queryVersion", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns3__queryVersionResponse(soap, _param_2);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns3__queryVersionResponse(soap, _param_2, "ns3:queryVersionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns3__sendMessage(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns2__SendMsgReq *_in0, struct ns3__sendMessageResponse *_param_3)
{	struct ns3__sendMessage soap_tmp_ns3__sendMessage;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/soap/services/GPSService";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns3__sendMessage._in0 = _in0;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns3__sendMessage(soap, &soap_tmp_ns3__sendMessage);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns3__sendMessage(soap, &soap_tmp_ns3__sendMessage, "ns3:sendMessage", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns3__sendMessage(soap, &soap_tmp_ns3__sendMessage, "ns3:sendMessage", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns3__sendMessageResponse(soap, _param_3);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns3__sendMessageResponse(soap, _param_3, "ns3:sendMessageResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns3__setGPSFrequency(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns2__SetGPSFrequencyReq *_in0, struct ns3__setGPSFrequencyResponse *_param_4)
{	struct ns3__setGPSFrequency soap_tmp_ns3__setGPSFrequency;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/soap/services/GPSService";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns3__setGPSFrequency._in0 = _in0;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns3__setGPSFrequency(soap, &soap_tmp_ns3__setGPSFrequency);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns3__setGPSFrequency(soap, &soap_tmp_ns3__setGPSFrequency, "ns3:setGPSFrequency", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns3__setGPSFrequency(soap, &soap_tmp_ns3__setGPSFrequency, "ns3:setGPSFrequency", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns3__setGPSFrequencyResponse(soap, _param_4);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns3__setGPSFrequencyResponse(soap, _param_4, "ns3:setGPSFrequencyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns3__setMileage(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns2__SetMileageReq *_in0, struct ns3__setMileageResponse *_param_5)
{	struct ns3__setMileage soap_tmp_ns3__setMileage;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/soap/services/GPSService";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns3__setMileage._in0 = _in0;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns3__setMileage(soap, &soap_tmp_ns3__setMileage);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns3__setMileage(soap, &soap_tmp_ns3__setMileage, "ns3:setMileage", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns3__setMileage(soap, &soap_tmp_ns3__setMileage, "ns3:setMileage", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns3__setMileageResponse(soap, _param_5);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns3__setMileageResponse(soap, _param_5, "ns3:setMileageResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns3__updateSysConf(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns2__UpdateSysConfReq *_in0, struct ns3__updateSysConfResponse *_param_6)
{	struct ns3__updateSysConf soap_tmp_ns3__updateSysConf;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/soap/services/GPSService";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns3__updateSysConf._in0 = _in0;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns3__updateSysConf(soap, &soap_tmp_ns3__updateSysConf);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns3__updateSysConf(soap, &soap_tmp_ns3__updateSysConf, "ns3:updateSysConf", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns3__updateSysConf(soap, &soap_tmp_ns3__updateSysConf, "ns3:updateSysConf", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns3__updateSysConfResponse(soap, _param_6);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns3__updateSysConfResponse(soap, _param_6, "ns3:updateSysConfResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns3__updateServerInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns2__UpdateServerInfoReq *_in0, struct ns3__updateServerInfoResponse *_param_7)
{	struct ns3__updateServerInfo soap_tmp_ns3__updateServerInfo;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/soap/services/GPSService";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns3__updateServerInfo._in0 = _in0;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns3__updateServerInfo(soap, &soap_tmp_ns3__updateServerInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns3__updateServerInfo(soap, &soap_tmp_ns3__updateServerInfo, "ns3:updateServerInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns3__updateServerInfo(soap, &soap_tmp_ns3__updateServerInfo, "ns3:updateServerInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns3__updateServerInfoResponse(soap, _param_7);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns3__updateServerInfoResponse(soap, _param_7, "ns3:updateServerInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

#ifdef __cplusplus
}
#endif

/* End of soapClient.c */
